# üìñ BookQuest ‚Äî App B√≠blico de Perguntas

## üß† Vis√£o Geral

Aplicativo de perguntas b√≠blicas onde o usu√°rio deve adivinhar de qual **livro da B√≠blia** foi extra√≠da uma determinada frase (vers√≠culo). A pontua√ß√£o varia de acordo com a dificuldade e o usu√°rio pode jogar uma sess√£o por dia, acumulando pontos e estat√≠sticas semanais/mensais.

---

## üöÄ Funcionalidades do MVP

### üéÆ Modo de Jogo
* O usu√°rio pode jogar uma vez por dia (controle por `daily_stats.date`)
* Pode escolher o **n√≠vel de dificuldade**: `f√°cil`, `m√©dio`, `dif√≠cil` ou `aleat√≥rio`
* O jogo termina ap√≥s **3 erros**
* **Modo aleat√≥rio**: mistura vers√≠culos de todos os n√≠veis (pontua√ß√£o baseada no n√≠vel real do vers√≠culo)
* **Sistema de streak**: conquistas baseadas em dias consecutivos jogando

### üßÆ Pontua√ß√£o
| Dificuldade | Pontos por acerto |
| ----------- | ----------------- |
| F√°cil       | 10                |
| M√©dio       | 20                |
| Dif√≠cil     | 30                |

### üìä Estat√≠sticas
* Acertos e erros por: Dia, Semana, M√™s, Total geral
* Melhor pontua√ß√£o di√°ria e semanal
* Taxa de acertos por n√≠vel

---

## üóÇÔ∏è ESTRUTURA FINAL DO BANCO DE DADOS

### ‚úÖ **BANCO B√ÅSICO DA B√çBLIA (Assets)**
```
üìÅ assets/
‚îî‚îÄ‚îÄ bible_nvi.db (5MB)
    ‚îú‚îÄ‚îÄ book (66 livros)
    ‚îú‚îÄ‚îÄ verse (31.105 vers√≠culos)  
    ‚îú‚îÄ‚îÄ testament (AT/NT)
    ‚îî‚îÄ‚îÄ metadata
```

**üîÑ FLUXO COMPLETO DE INICIALIZA√á√ÉO:**
```
üì± App Abre
    ‚Üì
üîç Verifica: /Documents/bible_quiz.db existe?
    ‚Üì
‚ùå N√ÉO ‚Üí üì• Copia assets/bible_nvi.db para Documents/
    ‚Üì
‚úÖ SIM ‚Üí üîß Abre banco existente
    ‚Üì
üöÄ Executa migrations (v1 ‚Üí v2)
    ‚Üì
üìã Cria tabelas: book_difficulty, user_responses, etc.
    ‚Üì  
üå± Popula seeds: 66 livros + conquistas
    ‚Üì
‚úÖ PRONTO: Banco completo funcionando!
```

**üéØ RESULTADO FINAL:**
- ‚úÖ **Banco da B√≠blia preservado** (tabelas originais intactas)
- ‚úÖ **Funcionalidades do jogo adicionadas** (novas tabelas)
- ‚úÖ **Dados iniciais populados** (classifica√ß√µes + conquistas)
- ‚úÖ **Performance otimizada** (tudo local, sem downloads)

### ‚úÖ **TABELAS EXISTENTES (N√ÉO MODIFICAR)**
```sql
-- ‚ö° J√Å EXISTEM NO ASSETS - Manter exatamente como est√°
CREATE TABLE IF NOT EXISTS "book" (
	"id"	INTEGER,
	"book_reference_id"	INTEGER,
	"testament_reference_id"	INTEGER,
	"name"	TEXT
);

CREATE TABLE IF NOT EXISTS "verse" (
	"id"	INTEGER,
	"book_id"	INTEGER,
	"chapter"	INTEGER,
	"verse"	INTEGER,
	"text"	TEXT
);

CREATE TABLE IF NOT EXISTS "testament" (
	"id"	INTEGER,
	"name"	TEXT
);

CREATE TABLE IF NOT EXISTS "metadata" (
	"key"	TEXT,
	"value"	TEXT
);
```

### üÜï **NOVAS TABELAS VIA MIGRATIONS (Depois da c√≥pia)**
```sql
-- Classifica√ß√£o de dificuldade dos livros
CREATE TABLE book_difficulty (
  id INTEGER PRIMARY KEY,
  book_name TEXT UNIQUE,
  difficulty_level TEXT CHECK(difficulty_level IN ('f√°cil', 'm√©dio', 'dif√≠cil')),
  points_value INTEGER,
  testament_type TEXT CHECK(testament_type IN ('AT', 'NT')),
  popularity_score INTEGER CHECK(popularity_score BETWEEN 1 AND 10)
);

-- Controle de vers√≠culos para quiz
CREATE TABLE verse_quiz_data (
  id INTEGER PRIMARY KEY,
  verse_id INTEGER UNIQUE,
  is_quiz_eligible BOOLEAN DEFAULT 1,
  word_count INTEGER,
  character_count INTEGER,
  last_used_date TEXT,
  usage_count INTEGER DEFAULT 0,
  blacklist_reason TEXT, -- 'too_short', 'common_phrase', 'manual'
  FOREIGN KEY (verse_id) REFERENCES verse(id)
);

-- Black list de frases comuns imposs√≠veis de identificar
CREATE TABLE verse_blacklist_phrases (
  id INTEGER PRIMARY KEY,
  phrase TEXT UNIQUE,
  reason TEXT,
  testament_type TEXT -- 'AT', 'NT', 'BOTH'
);

-- Respostas do usu√°rio
CREATE TABLE user_responses (
  id INTEGER PRIMARY KEY,
  verse_id INTEGER,
  session_id TEXT,
  date_answered DATETIME DEFAULT CURRENT_TIMESTAMP,
  correct BOOLEAN,
  difficulty_chosen TEXT,
  alternatives_shown TEXT,
  time_to_answer INTEGER,
  points_earned INTEGER,
  FOREIGN KEY (verse_id) REFERENCES verse(id)
);

-- Sess√µes de jogo
CREATE TABLE game_sessions (
  id TEXT PRIMARY KEY,
  start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
  end_time DATETIME,
  difficulty_level TEXT,
  total_questions INTEGER DEFAULT 0,
  correct_answers INTEGER DEFAULT 0,
  wrong_answers INTEGER DEFAULT 0,
  total_points INTEGER DEFAULT 0,
  session_completed BOOLEAN DEFAULT 0,
  best_streak INTEGER DEFAULT 0
);

-- Estat√≠sticas di√°rias
CREATE TABLE daily_stats (
  id INTEGER PRIMARY KEY,
  date TEXT UNIQUE,
  sessions_played INTEGER DEFAULT 0,
  total_questions INTEGER DEFAULT 0,
  correct_answers INTEGER DEFAULT 0,
  total_points INTEGER DEFAULT 0,
  best_session_points INTEGER DEFAULT 0,
  easy_correct INTEGER DEFAULT 0,
  medium_correct INTEGER DEFAULT 0,
  hard_correct INTEGER DEFAULT 0
);

-- Sistema de conquistas
CREATE TABLE achievements (
  id INTEGER PRIMARY KEY,
  name TEXT UNIQUE,
  description TEXT,
  icon TEXT,
  unlock_condition TEXT,
  unlocked_at DATETIME,
  is_unlocked BOOLEAN DEFAULT 0
);
```

### üå± **SEED DOS 66 LIVROS DA B√çBLIA (Minha responsabilidade!)**
```sql
-- üü¢ F√ÅCIL (10 pontos) - 15 livros mais populares e conhecidos
INSERT INTO book_difficulty (book_name, difficulty_level, points_value, testament_type, popularity_score) VALUES
-- Antigo Testamento (8 livros)
('Salmos', 'f√°cil', 10, 'AT', 10),        -- Livro mais lido
('Prov√©rbios', 'f√°cil', 10, 'AT', 9),     -- Muito citado
('G√™nesis', 'f√°cil', 10, 'AT', 10),       -- Cria√ß√£o, No√©, Abra√£o
('√äxodo', 'f√°cil', 10, 'AT', 9),          -- Mois√©s, 10 Mandamentos
('Deuteron√¥mio', 'f√°cil', 10, 'AT', 7),   -- Repeti√ß√£o da lei
('Josu√©', 'f√°cil', 10, 'AT', 7),          -- Conquista da Terra Prometida
('1 Samuel', 'f√°cil', 10, 'AT', 8),       -- Davi vs Golias
('2 Samuel', 'f√°cil', 10, 'AT', 7),       -- Reino de Davi

-- Novo Testamento (7 livros)
('Mateus', 'f√°cil', 10, 'NT', 10),        -- Evangelho mais conhecido
('Marcos', 'f√°cil', 10, 'NT', 8),         -- Evangelho mais curto
('Lucas', 'f√°cil', 10, 'NT', 9),          -- M√©dico, detalhado
('Jo√£o', 'f√°cil', 10, 'NT', 10),          -- "Deus amou o mundo"
('Atos', 'f√°cil', 10, 'NT', 8),           -- Igreja primitiva
('Romanos', 'f√°cil', 10, 'NT', 9),        -- Teologia de Paulo
('1 Cor√≠ntios', 'f√°cil', 10, 'NT', 8);    -- Amor em 1 Co 13

-- üü° M√âDIO (20 pontos) - 25 livros conhecidos mas menos populares  
INSERT INTO book_difficulty (book_name, difficulty_level, points_value, testament_type, popularity_score) VALUES
-- Antigo Testamento (15 livros)
('Lev√≠tico', 'm√©dio', 20, 'AT', 4),       -- Leis, sacrif√≠cios
('N√∫meros', 'm√©dio', 20, 'AT', 3),        -- 40 anos no deserto
('Ju√≠zes', 'm√©dio', 20, 'AT', 6),         -- Sans√£o, Gide√£o
('Rute', 'm√©dio', 20, 'AT', 7),           -- Hist√≥ria linda
('1 Reis', 'm√©dio', 20, 'AT', 6),         -- Salom√£o, Elias
('2 Reis', 'm√©dio', 20, 'AT', 5),         -- Profetas
('1 Cr√¥nicas', 'm√©dio', 20, 'AT', 3),     -- Genealogias
('2 Cr√¥nicas', 'm√©dio', 20, 'AT', 3),     -- Hist√≥ria dos reis
('Esdras', 'm√©dio', 20, 'AT', 3),         -- Reconstru√ß√£o
('Neemias', 'm√©dio', 20, 'AT', 4),        -- Muros de Jerusal√©m
('Ester', 'm√©dio', 20, 'AT', 6),          -- Rainha corajosa
('J√≥', 'm√©dio', 20, 'AT', 7),             -- Sofrimento
('Eclesiastes', 'm√©dio', 20, 'AT', 8),    -- "Tudo √© vaidade"
('Cantares', 'm√©dio', 20, 'AT', 4),       -- Amor po√©tico
('Isa√≠as', 'm√©dio', 20, 'AT', 8),         -- Grande profeta

-- Novo Testamento (10 livros)
('2 Cor√≠ntios', 'm√©dio', 20, 'NT', 6),    -- Paulo se defende
('G√°latas', 'm√©dio', 20, 'NT', 6),        -- Liberdade crist√£
('Ef√©sios', 'm√©dio', 20, 'NT', 7),        -- Igreja corpo de Cristo
('Filipenses', 'm√©dio', 20, 'NT', 7),     -- Alegria na pris√£o
('Colossenses', 'm√©dio', 20, 'NT', 6),    -- Cristo supremo
('1 Tessalonicenses', 'm√©dio', 20, 'NT', 5), -- Segunda vinda
('2 Tessalonicenses', 'm√©dio', 20, 'NT', 4), -- Escatologia
('Hebreus', 'm√©dio', 20, 'NT', 7),        -- Cristo sumo sacerdote
('Tiago', 'm√©dio', 20, 'NT', 7),          -- F√© e obras
('1 Pedro', 'm√©dio', 20, 'NT', 6);        -- Sofrimento crist√£o

-- üî¥ DIF√çCIL (30 pontos) - 26 livros menos conhecidos e espec√≠ficos
INSERT INTO book_difficulty (book_name, difficulty_level, points_value, testament_type, popularity_score) VALUES
-- Antigo Testamento (17 livros - Profetas menores + outros)
('Jeremias', 'dif√≠cil', 30, 'AT', 5),     -- Profeta chor√£o
('Lamenta√ß√µes', 'dif√≠cil', 30, 'AT', 2),  -- Lamento por Jerusal√©m
('Ezequiel', 'dif√≠cil', 30, 'AT', 4),     -- Vis√µes estranhas
('Daniel', 'dif√≠cil', 30, 'AT', 6),       -- Apocal√≠ptico
('Os√©ias', 'dif√≠cil', 30, 'AT', 3),       -- Casamento simb√≥lico
('Joel', 'dif√≠cil', 30, 'AT', 2),         -- Gafanhotos
('Am√≥s', 'dif√≠cil', 30, 'AT', 3),         -- Justi√ßa social
('Obadias', 'dif√≠cil', 30, 'AT', 1),      -- Menor livro AT
('Jonas', 'dif√≠cil', 30, 'AT', 6),        -- Peixe grande (conhecido mas pequeno)
('Miqu√©ias', 'dif√≠cil', 30, 'AT', 3),     -- Nascimento em Bel√©m
('Naum', 'dif√≠cil', 30, 'AT', 1),         -- Queda de N√≠nive
('Habacuque', 'dif√≠cil', 30, 'AT', 2),    -- "O justo viver√° pela f√©"
('Sofonias', 'dif√≠cil', 30, 'AT', 1),     -- Dia do Senhor
('Ageu', 'dif√≠cil', 30, 'AT', 1),         -- Reconstru√ß√£o do templo
('Zacarias', 'dif√≠cil', 30, 'AT', 3),     -- Vis√µes messi√¢nicas
('Malaquias', 'dif√≠cil', 30, 'AT', 3);    -- √öltimo profeta AT

-- Novo Testamento (9 livros - Cartas menores)
INSERT INTO book_difficulty (book_name, difficulty_level, points_value, testament_type, popularity_score) VALUES
('1 Tim√≥teo', 'dif√≠cil', 30, 'NT', 4),    -- Pastoral
('2 Tim√≥teo', 'dif√≠cil', 30, 'NT', 4),    -- √öltima carta de Paulo
('Tito', 'dif√≠cil', 30, 'NT', 3),         -- Organiza√ß√£o da igreja
('Filemom', 'dif√≠cil', 30, 'NT', 2),      -- Menor livro NT
('2 Pedro', 'dif√≠cil', 30, 'NT', 3),      -- Falsos mestres
('1 Jo√£o', 'dif√≠cil', 30, 'NT', 5),       -- "Deus √© amor"
('2 Jo√£o', 'dif√≠cil', 30, 'NT', 1),       -- Carta curtinha
('3 Jo√£o', 'dif√≠cil', 30, 'NT', 1),       -- Sobre hospitalidade
('Judas', 'dif√≠cil', 30, 'NT', 2),        -- Contra falsos mestres
('Apocalipse', 'dif√≠cil', 30, 'NT', 6);   -- Revela√ß√£o (complexo)

-- üèÜ CONQUISTAS INICIAIS (tamb√©m minha responsabilidade!)
INSERT INTO achievements (name, description, icon, unlock_condition, is_unlocked) VALUES
('Primeiro Passo', 'Complete sua primeira sess√£o', 'first_step', '{"sessions_completed": 1}', 0),
('Persistente', 'Jogue 3 dias consecutivos', 'persistent', '{"consecutive_days": 3}', 0),
('Conhecedor', 'Acerte 20 perguntas', 'knowledgeable', '{"total_correct": 20}', 0),
('Especialista', 'Acerte 50 perguntas', 'expert', '{"total_correct": 50}', 0),
('Mestre dos Salmos', 'Acerte 10 vers√≠culos de Salmos', 'psalms_master', '{"book_correct": {"Salmos": 10}}', 0),
('Perfeccionista', 'Complete uma sess√£o sem erros', 'perfectionist', '{"perfect_session": 1}', 0),
('Desbravador', 'Acerte pelo menos um vers√≠culo de cada dificuldade', 'explorer', '{"all_difficulties": 1}', 0);

-- üö´ BLACK LIST DE FRASES COMUNS (Minha responsabilidade!)
INSERT INTO verse_blacklist_phrases (phrase, reason, testament_type) VALUES
-- Frases do Antigo Testamento
('ent√£o disse o senhor', 'Frase gen√©rica repetida centenas de vezes', 'AT'),
('assim diz o senhor', 'Frase prof√©tica gen√©rica', 'AT'),
('palavra do senhor', 'Frase gen√©rica', 'BOTH'),
('respondeu e disse', 'Estrutura de di√°logo comum', 'AT'),
('veio a palavra do senhor', 'In√≠cio prof√©tico padr√£o', 'AT'),
('disse o senhor dos ex√©rcitos', 'Frase militar gen√©rica', 'AT'),
('ent√£o respondeu', 'In√≠cio de resposta gen√©rico', 'BOTH'),
('e disse-lhe', 'Estrutura de di√°logo', 'BOTH'),
('responderam os', 'In√≠cio de resposta coletiva', 'AT'),
('filhos de israel', 'Refer√™ncia gen√©rica ao povo', 'AT'),
('casa de israel', 'Refer√™ncia gen√©rica', 'AT'),
('habitaram na terra', 'Descri√ß√£o geogr√°fica comum', 'AT'),
('nos dias de', 'Refer√™ncia temporal gen√©rica', 'BOTH'),
('aconteceu que', 'In√≠cio narrativo comum', 'AT'),
('naqueles dias', 'Refer√™ncia temporal', 'BOTH'),

-- Frases do Novo Testamento
('jesus disse', 'Muito gen√©rico', 'NT'),
('respondeu jesus', 'Muito comum', 'NT'),
('disse-lhes jesus', 'Estrutura comum', 'NT'),
('perguntaram-lhe', 'In√≠cio de pergunta gen√©rico', 'NT'),
('ele lhes disse', 'Estrutura narrativa', 'NT'),
('respondeu-lhe', 'Resposta gen√©rica', 'NT'),
('disse aos seus disc√≠pulos', 'Muito comum nos evangelhos', 'NT'),
('verdadeiramente vos digo', 'Frase caracter√≠stica mas repetida', 'NT'),
('em verdade vos digo', 'Varia√ß√£o da anterior', 'NT'),
('irm√£os', 'Muito gen√©rico nas cartas', 'NT'),
('gra√ßa e paz', 'Sauda√ß√£o padr√£o das cartas', 'NT'),
('o senhor jesus cristo', 'Refer√™ncia gen√©rica', 'NT'),
('no nome de jesus', 'Frase comum', 'NT'),
('pelo poder de deus', 'Express√£o gen√©rica', 'NT');
```

---

## üîß SETUP DO PROJETO FLUTTER

### ÔøΩÔ∏è **PROCESSO DE INICIALIZA√á√ÉO DO BANCO**
```dart
// lib/database/database_helper.dart
class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;
  DatabaseHelper._internal();
  
  Database? _database;
  static const int DATABASE_VERSION = 2; // Vers√£o com migrations
  
  Future<Database> get database async {
    _database ??= await _initDatabase();
    return _database!;
  }
  
  Future<Database> _initDatabase() async {
    String databasesPath = await getDatabasesPath();
    String path = join(databasesPath, 'bible_quiz.db');
    
    // üìã PASSO 1: Verificar se banco j√° existe
    if (!await File(path).exists()) {
      print('üîÑ Primeira execu√ß√£o: Copiando banco da B√≠blia...');
      
      // üìã PASSO 2: Copiar banco b√°sico do assets
      ByteData data = await rootBundle.load('assets/bible_nvi.db');
      List<int> bytes = data.buffer.asUint8List();
      await File(path).writeAsBytes(bytes);
      
      print('‚úÖ Banco da B√≠blia copiado com sucesso!');
    }
    
    // üìã PASSO 3: Abrir banco e executar migrations
    return await openDatabase(
      path,
      version: DATABASE_VERSION,
      onUpgrade: _runMigrations,
    );
  }
  
  // üöÄ MIGRATIONS: Adicionar tabelas do jogo
  Future<void> _runMigrations(Database db, int oldVersion, int newVersion) async {
    print('üîÑ Executando migrations v$oldVersion ‚Üí v$newVersion...');
    
    if (oldVersion < 2) {
      // Criar todas as tabelas do jogo
      await _createGameTables(db);
      // Popular dados iniciais
      await _populateInitialData(db);
      // ‚úÖ NOVO: Analisar e filtrar vers√≠culos
      await _analyzeVerses(db);
    }
    
    print('‚úÖ Migrations conclu√≠das!');
  }
  
  // ÔøΩ CRIAR TABELAS DO JOGO
  Future<void> _createGameTables(Database db) async {
    print('üìã Criando tabelas do jogo...');
    
    // Todas as queries CREATE TABLE j√° documentadas acima
    await db.execute('''CREATE TABLE book_difficulty (
      id INTEGER PRIMARY KEY,
      book_name TEXT UNIQUE,
      difficulty_level TEXT CHECK(difficulty_level IN ('f√°cil', 'm√©dio', 'dif√≠cil')),
      points_value INTEGER,
      testament_type TEXT CHECK(testament_type IN ('AT', 'NT')),
      popularity_score INTEGER CHECK(popularity_score BETWEEN 1 AND 10)
    )''');
    
    await db.execute('''CREATE TABLE verse_quiz_data (
      id INTEGER PRIMARY KEY,
      verse_id INTEGER UNIQUE,
      is_quiz_eligible BOOLEAN DEFAULT 1,
      word_count INTEGER,
      character_count INTEGER,
      last_used_date TEXT,
      usage_count INTEGER DEFAULT 0,
      blacklist_reason TEXT,
      FOREIGN KEY (verse_id) REFERENCES verse(id)
    )''');
    
    await db.execute('''CREATE TABLE verse_blacklist_phrases (
      id INTEGER PRIMARY KEY,
      phrase TEXT UNIQUE,
      reason TEXT,
      testament_type TEXT
    )''');
    
    await db.execute('''CREATE TABLE user_responses (
      id INTEGER PRIMARY KEY,
      verse_id INTEGER,
      session_id TEXT,
      date_answered DATETIME DEFAULT CURRENT_TIMESTAMP,
      correct BOOLEAN,
      difficulty_chosen TEXT,
      alternatives_shown TEXT,
      time_to_answer INTEGER,
      points_earned INTEGER,
      FOREIGN KEY (verse_id) REFERENCES verse(id)
    )''');
    
    await db.execute('''CREATE TABLE game_sessions (
      id TEXT PRIMARY KEY,
      start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
      end_time DATETIME,
      difficulty_level TEXT,
      total_questions INTEGER DEFAULT 0,
      correct_answers INTEGER DEFAULT 0,
      wrong_answers INTEGER DEFAULT 0,
      total_points INTEGER DEFAULT 0,
      session_completed BOOLEAN DEFAULT 0,
      best_streak INTEGER DEFAULT 0
    )''');
    
    await db.execute('''CREATE TABLE daily_stats (
      id INTEGER PRIMARY KEY,
      date TEXT UNIQUE,
      sessions_played INTEGER DEFAULT 0,
      total_questions INTEGER DEFAULT 0,
      correct_answers INTEGER DEFAULT 0,
      total_points INTEGER DEFAULT 0,
      best_session_points INTEGER DEFAULT 0,
      easy_correct INTEGER DEFAULT 0,
      medium_correct INTEGER DEFAULT 0,
      hard_correct INTEGER DEFAULT 0
    )''');
    
    await db.execute('''CREATE TABLE achievements (
      id INTEGER PRIMARY KEY,
      name TEXT UNIQUE,
      description TEXT,
      icon TEXT,
      unlock_condition TEXT,
      unlocked_at DATETIME,
      is_unlocked BOOLEAN DEFAULT 0
    )''');
  }
  
  // üå± POPULAR DADOS INICIAIS
  Future<void> _populateInitialData(Database db) async {
    print('üå± Populando dados iniciais...');
    
    // Todos os INSERTs j√° documentados acima
    // book_difficulty (66 livros)
    // achievements (7 conquistas iniciais)  
    // verse_blacklist_phrases (28 frases)
    
    // Executar todos os comandos INSERT do seed documentado
    // (Por brevidade, referenciando o c√≥digo SQL j√° documentado acima)
  }
  
  // ÔøΩüîç ANALISAR QUALIDADE DOS VERS√çCULOS
  Future<void> _analyzeVerses(Database db) async {
    print('üîç Analisando qualidade dos vers√≠culos...');
    
    // Buscar todos os vers√≠culos
    List<Map<String, dynamic>> verses = await db.query('verse');
    
    for (var verse in verses) {
      int verseId = verse['id'];
      String text = verse['text'] ?? '';
      
      bool isEligible = true;
      String? blacklistReason;
      
      // ‚ùå Filtro 1: Muito curto (menos de 50 caracteres)
      if (text.length < 50) {
        isEligible = false;
        blacklistReason = 'too_short';
      }
      
      // ‚ùå Filtro 2: Muito longo (mais de 300 caracteres)
      if (text.length > 300) {
        isEligible = false;
        blacklistReason = 'too_long';
      }
      
      // ‚ùå Filtro 3: Verifica contra blacklist de frases
      if (isEligible) {
        List<Map<String, dynamic>> blacklistPhrases = 
          await db.query('verse_blacklist_phrases');
        
        for (var phrase in blacklistPhrases) {
          if (text.toLowerCase().contains(phrase['phrase'].toLowerCase())) {
            isEligible = false;
            blacklistReason = 'common_phrase';
            break;
          }
        }
      }
      
      // ‚ùå Filtro 4: Padr√µes problem√°ticos
      if (isEligible) {
        if (text.toLowerCase().startsWith('ent√£o ') ||
            text.toLowerCase().startsWith('e ') ||
            text.contains('disse') && text.split('disse').length > 2) {
          isEligible = false;
          blacklistReason = 'dialogue_pattern';
        }
      }
      
      // Inserir na tabela de controle
      await db.insert('verse_quiz_data', {
        'verse_id': verseId,
        'is_quiz_eligible': isEligible ? 1 : 0,
        'word_count': text.split(' ').length,
        'character_count': text.length,
        'blacklist_reason': blacklistReason,
      }, conflictAlgorithm: ConflictAlgorithm.replace);
    }
    
    // Estat√≠sticas
    int total = verses.length;
    int eligible = await db.rawQuery(
      'SELECT COUNT(*) as count FROM verse_quiz_data WHERE is_quiz_eligible = 1'
    ).then((result) => result.first['count'] as int);
    
    print('‚úÖ An√°lise conclu√≠da: $eligible/$total vers√≠culos eleg√≠veis');
  }
}
```

### ÔøΩüì¶ pubspec.yaml
```yaml
name: a_bible
description: Quiz b√≠blico - Descubra de qual livro √© o vers√≠culo!
version: 1.0.0+1

dependencies:
  flutter:
    sdk: flutter
  
  # Database
  sqflite: ^2.3.0
  path: ^1.8.3
  
  # UI & Charts
  fl_chart: ^0.64.0
  google_fonts: ^6.1.0
  
  # State Management
  provider: ^6.0.5
  
  # Utilities
  intl: ^0.18.1
  uuid: ^4.1.0
  
  # Ads
  google_mobile_ads: ^4.0.0

flutter:
  assets:
    - assets/bible_nvi.db
    - assets/images/
```

### üìÅ Estrutura de Pastas
```
lib/
‚îú‚îÄ‚îÄ main.dart
‚îú‚îÄ‚îÄ constants/
‚îÇ   ‚îú‚îÄ‚îÄ app_colors.dart
‚îÇ   ‚îî‚îÄ‚îÄ app_strings.dart
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ verse_model.dart
‚îÇ   ‚îú‚îÄ‚îÄ question_model.dart
‚îÇ   ‚îî‚îÄ‚îÄ game_session_model.dart
‚îú‚îÄ‚îÄ database/
‚îÇ   ‚îú‚îÄ‚îÄ database_helper.dart
‚îÇ   ‚îî‚îÄ‚îÄ bible_repository.dart
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ question_generator.dart
‚îÇ   ‚îú‚îÄ‚îÄ game_session_service.dart
‚îÇ   ‚îî‚îÄ‚îÄ ads_service.dart
‚îú‚îÄ‚îÄ providers/
‚îÇ   ‚îî‚îÄ‚îÄ game_provider.dart
‚îú‚îÄ‚îÄ screens/
‚îÇ   ‚îú‚îÄ‚îÄ home_screen.dart
‚îÇ   ‚îú‚îÄ‚îÄ difficulty_screen.dart
‚îÇ   ‚îú‚îÄ‚îÄ game_screen.dart
‚îÇ   ‚îî‚îÄ‚îÄ statistics_screen.dart
‚îî‚îÄ‚îÄ widgets/
    ‚îú‚îÄ‚îÄ question_card.dart
    ‚îî‚îÄ‚îÄ alternative_button.dart
```

---

## üéØ ESTRAT√âGIA DE DIFICULDADE

### üìö Classifica√ß√£o dos Livros
**F√ÅCIL (10 pontos)** - Livros populares:
- Salmos, Prov√©rbios, G√™nesis, Jo√£o, Mateus, Romanos

**M√âDIO (20 pontos)** - Conhecidos mas menos populares:
- Isa√≠as, Jeremias, Daniel, Atos, Hebreus, Apocalipse

**DIF√çCIL (30 pontos)** - Livros menos conhecidos:
- Lev√≠tico, N√∫meros, 1 Cr√¥nicas, Esdras, Naum, Filemom, etc.

### üé≤ Gera√ß√£o de Alternativas
1. Buscar 3 livros do mesmo testamento (AT/NT)
2. Priorizar por popularidade similar
3. Incluir resposta correta
4. Embaralhar ordem

---

## üí° L√ìGICA PRINCIPAL DO JOGO

### üîç Query para Buscar Vers√≠culo (COM FILTROS DE QUALIDADE)
```sql
-- Para dificuldades espec√≠ficas (f√°cil, m√©dio, dif√≠cil)
SELECT 
  v.id, v.text, b.name as book_name, 
  v.chapter, v.verse,
  bd.difficulty_level, bd.points_value
FROM verse v
JOIN book b ON v.book_id = b.id
JOIN book_difficulty bd ON b.name = bd.book_name
LEFT JOIN verse_quiz_data vqd ON v.id = vqd.verse_id
WHERE bd.difficulty_level = :difficulty
  -- ‚úÖ Filtros de qualidade (j√° implementados acima)
  AND LENGTH(v.text) BETWEEN 50 AND 300
  AND vqd.is_quiz_eligible = 1
  AND vqd.blacklist_reason IS NULL
  AND NOT EXISTS (SELECT 1 FROM verse_blacklist_phrases vbp 
                  WHERE LOWER(v.text) LIKE '%' || LOWER(vbp.phrase) || '%')
  AND v.id NOT IN (SELECT verse_id FROM user_responses 
                   WHERE date_answered >= date('now', '-7 days'))
ORDER BY RANDOM() LIMIT 1;

-- Para modo ALEAT√ìRIO (todos os n√≠veis)
SELECT 
  v.id, v.text, b.name as book_name, 
  v.chapter, v.verse,
  bd.difficulty_level, bd.points_value
FROM verse v
JOIN book b ON v.book_id = b.id
JOIN book_difficulty bd ON b.name = bd.book_name
LEFT JOIN verse_quiz_data vqd ON v.id = vqd.verse_id
WHERE vqd.is_quiz_eligible = 1
  AND vqd.blacklist_reason IS NULL
  AND LENGTH(v.text) BETWEEN 50 AND 300
  AND NOT EXISTS (SELECT 1 FROM verse_blacklist_phrases vbp 
                  WHERE LOWER(v.text) LIKE '%' || LOWER(vbp.phrase) || '%')
  AND v.id NOT IN (SELECT verse_id FROM user_responses 
                   WHERE date_answered >= date('now', '-7 days'))
ORDER BY RANDOM() LIMIT 1;
```

### üéØ Query para Gerar Alternativas (INTELIGENTE)
```sql
-- Buscar alternativas do mesmo testamento, evitando a resposta correta
SELECT DISTINCT b.name, bd.difficulty_level
FROM book b
JOIN book_difficulty bd ON b.name = bd.book_name
JOIN testament t ON b.testament_reference_id = t.id
WHERE t.name = :testament_name  -- 'Antigo Testamento' ou 'Novo Testamento'
  AND b.name != :correct_answer
  AND bd.difficulty_level IN (
    -- Para f√°cil: s√≥ f√°cil e m√©dio
    CASE WHEN :correct_difficulty = 'f√°cil' 
         THEN ('f√°cil', 'm√©dio') 
    -- Para m√©dio: f√°cil, m√©dio e dif√≠cil  
    WHEN :correct_difficulty = 'm√©dio' 
         THEN ('f√°cil', 'm√©dio', 'dif√≠cil')
    -- Para dif√≠cil: m√©dio e dif√≠cil
    ELSE ('m√©dio', 'dif√≠cil') END
  )
ORDER BY 
  -- Priorizar dificuldade similar
  CASE WHEN bd.difficulty_level = :correct_difficulty THEN 1 ELSE 2 END,
  bd.popularity_score DESC,
  RANDOM()
LIMIT 3;

-- FALLBACK: Se n√£o houver 3 alternativas do mesmo testamento
SELECT DISTINCT b.name 
FROM book b
JOIN book_difficulty bd ON b.name = bd.book_name
WHERE b.name != :correct_answer
ORDER BY bd.popularity_score DESC, RANDOM()
LIMIT 3;
```

### üéÆ Controle de Sess√£o Di√°ria
```sql
-- Verificar se j√° jogou hoje
SELECT COUNT(*) as sessions_today 
FROM daily_stats 
WHERE date = DATE('now');

-- Se sessions_today > 0, bloquear novo jogo
-- Sen√£o, permitir nova sess√£o
```

---

## üí∞ Monetiza√ß√£o
* Apenas AdMob com banner discreto (sem intersticial ou v√≠deo)

---

## üìã CHECKLIST DE IMPLEMENTA√á√ÉO

### ‚úÖ Funcionalidades Core
- [ ] Sistema de perguntas funcionando 100%
- [ ] Gera√ß√£o autom√°tica de alternativas  
- [ ] Sistema de pontua√ß√£o correto
- [ ] Limite de 3 erros por sess√£o
- [ ] Rotatividade de perguntas (sem repeti√ß√£o)

### ‚úÖ Interface e UX
- [ ] Design responsivo (telefones/tablets)
- [ ] Anima√ß√µes suaves e fluidas
- [ ] Feedback visual claro
- [ ] Loading states em todas as opera√ß√µes

### ‚úÖ Banco de Dados
- [ ] SQLite funciona offline 100%
- [ ] Migrations implementadas
- [ ] Performance otimizada (consultas < 100ms)

### ‚úÖ Monetiza√ß√£o
- [ ] AdMob configurado e testado
- [ ] Banners n√£o-intrusivos
- [ ] IDs de produ√ß√£o configurados

---

## üöÄ PR√ìXIMOS PASSOS
1. **Configurar** migrations no Flutter
2. **Popular** tabela book_difficulty com classifica√ß√µes
3. **Implementar** gerador de perguntas
4. **Desenvolver** telas principais
5. **Integrar** AdMob
6. **Testes** em dispositivos reais

---

## üéâ META FINAL
**Criar o "Duolingo da B√≠blia"** - um app viciante, educativo e lucrativo com:
- üìö 31.105 vers√≠culos de conte√∫do infinito
- üéÆ Gamifica√ß√£o completa
- üìä Estat√≠sticas detalhadas  
- üí∞ Monetiza√ß√£o discreta
- ‚ö° 100% offline e r√°pido
